/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JPRG_CA2_Project;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.function.Consumer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import JPRG_CA2_Project.GPACalculator.*;
import java.util.ArrayList;


/**
 *
 * @author Rafael
 */
public class StudentEnquiryView extends javax.swing.JFrame {
    private List<HashMap<String, Object>> students = new ArrayList<>();
    private int currentPage = 1;
    private static final int PAGE_SIZE = 20;
    private int totalPageCount = 1;
    private int currentModulePage = 0;
    private int totalModulePageCount = 0;
    private List<Modules> currentStudentModules = new ArrayList<>();
    private JTextField searchBar;
    

    /**
     * Creates new form StudentEnquiryView
     */
    public StudentEnquiryView() {
        initComponents();
        
        byClassRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (byClassRadioButton.isSelected()) {
                    byNameRadioButton.setSelected(false);
                }
            }
        });

        byNameRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (byNameRadioButton.isSelected()) {
                    byClassRadioButton.setSelected(false);
                }
            }
        });
        
        prevPageButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentPage > 1) {
                    currentPage--;
                    populateStudentButtons(students);
                }
            }
        });

        nextPageButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentPage < totalPageCount) {
                    currentPage++;
                    populateStudentButtons(students);
                }
            }
        });
        
        prevModulePageButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                previousPageModule();
            }
        });

        nextModulePageButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                nextPageModule();
            }
        });
        
        // Add action listeners to the buttons
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        
        
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        Body = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        classPane = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        classInfoPane = new javax.swing.JPanel();
        avgGPALabel = new javax.swing.JLabel();
        studCountLabel = new javax.swing.JLabel();
        avgGPAIndicator = new javax.swing.JLabel();
        studCountIndicator = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JTable();
        paginationPanel = new javax.swing.JPanel();
        prevPageButton = new javax.swing.JButton();
        pageLabel = new javax.swing.JLabel();
        nextPageButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        advancedFeaturePanel = new javax.swing.JPanel();
        errorField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        studentPanel = new javax.swing.JPanel();
        studentDetailPanel = new javax.swing.JPanel();
        paneTitle = new javax.swing.JLabel();
        studNameField = new javax.swing.JTextField();
        studAdminField = new javax.swing.JTextField();
        studClassField = new javax.swing.JTextField();
        studGPAField = new javax.swing.JTextField();
        studNameLabel = new javax.swing.JLabel();
        studAdminLabel = new javax.swing.JLabel();
        studClassLabel = new javax.swing.JLabel();
        studGPALabel = new javax.swing.JLabel();
        studentModulePanel = new javax.swing.JPanel();
        paneTitle1 = new javax.swing.JLabel();
        modCodeField = new javax.swing.JTextField();
        modNameField = new javax.swing.JTextField();
        modCreditField = new javax.swing.JTextField();
        modGradeField = new javax.swing.JTextField();
        modCodeLabel = new javax.swing.JLabel();
        modNameLabel = new javax.swing.JLabel();
        modCreditLabel = new javax.swing.JLabel();
        modGradeLabel = new javax.swing.JLabel();
        paginationPanel1 = new javax.swing.JPanel();
        prevModulePageButton = new javax.swing.JButton();
        modulePageIndicator = new javax.swing.JLabel();
        nextModulePageButton = new javax.swing.JButton();
        Navbar = new javax.swing.JPanel();
        SearchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        byClassRadioButton = new javax.swing.JRadioButton();
        byNameRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        Body.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Body.setPreferredSize(new java.awt.Dimension(400, 566));
        Body.setLayout(new javax.swing.BoxLayout(Body, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(600, 827));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 800));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 503));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        classPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        classPane.setMaximumSize(new java.awt.Dimension(32767, 50));
        classPane.setMinimumSize(new java.awt.Dimension(0, 50));
        classPane.setPreferredSize(new java.awt.Dimension(333, 50));
        classPane.setLayout(new javax.swing.BoxLayout(classPane, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setText("Results");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        classPane.add(jPanel5);

        classInfoPane.setLayout(new java.awt.GridBagLayout());

        avgGPALabel.setText("Average GPA:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        classInfoPane.add(avgGPALabel, gridBagConstraints);

        studCountLabel.setText("Class Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        classInfoPane.add(studCountLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        classInfoPane.add(avgGPAIndicator, gridBagConstraints);
        classInfoPane.add(studCountIndicator, new java.awt.GridBagConstraints());

        classPane.add(classInfoPane);

        jPanel2.add(classPane);

        resultsPanel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        resultsPanel.setMinimumSize(new java.awt.Dimension(15, 900));
        resultsPanel.setPreferredSize(new java.awt.Dimension(396, 500));
        resultsPanel.setRowHeight(30);
        jPanel2.add(resultsPanel);

        paginationPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        paginationPanel.setMaximumSize(new java.awt.Dimension(10000, 25));
        paginationPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        paginationPanel.setPreferredSize(new java.awt.Dimension(100, 25));
        paginationPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        prevPageButton.setText("-1");
        paginationPanel.add(prevPageButton);
        paginationPanel.add(pageLabel);

        nextPageButton.setText("+1");
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });
        paginationPanel.add(nextPageButton);

        jPanel2.add(paginationPanel);

        Body.add(jPanel2);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        advancedFeaturePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        advancedFeaturePanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        advancedFeaturePanel.setPreferredSize(new java.awt.Dimension(80, 50));
        advancedFeaturePanel.setLayout(new javax.swing.BoxLayout(advancedFeaturePanel, javax.swing.BoxLayout.LINE_AXIS));

        errorField.setEditable(false);
        errorField.setMaximumSize(new java.awt.Dimension(600, 40));
        errorField.setMinimumSize(new java.awt.Dimension(200, 30));
        errorField.setPreferredSize(new java.awt.Dimension(160, 27));
        errorField.setSelectedTextColor(new java.awt.Color(204, 0, 0));
        errorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorFieldActionPerformed(evt);
            }
        });
        advancedFeaturePanel.add(errorField);

        jPanel3.setMaximumSize(new java.awt.Dimension(200, 60));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 60));

        exitButton.setText("Exit");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(exitButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(exitButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        advancedFeaturePanel.add(jPanel3);

        jPanel6.add(advancedFeaturePanel);

        studentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        studentPanel.setLayout(new javax.swing.BoxLayout(studentPanel, javax.swing.BoxLayout.Y_AXIS));

        studentDetailPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        studentDetailPanel.setLayout(new java.awt.GridBagLayout());

        paneTitle.setText("Student Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentDetailPanel.add(paneTitle, gridBagConstraints);

        studNameField.setEditable(false);
        studNameField.setMinimumSize(new java.awt.Dimension(200, 30));
        studNameField.setPreferredSize(new java.awt.Dimension(160, 27));
        studNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        studentDetailPanel.add(studNameField, gridBagConstraints);

        studAdminField.setEditable(false);
        studAdminField.setMinimumSize(new java.awt.Dimension(200, 30));
        studAdminField.setPreferredSize(new java.awt.Dimension(160, 27));
        studAdminField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studAdminFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        studentDetailPanel.add(studAdminField, gridBagConstraints);

        studClassField.setEditable(false);
        studClassField.setPreferredSize(new java.awt.Dimension(160, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        studentDetailPanel.add(studClassField, gridBagConstraints);

        studGPAField.setEditable(false);
        studGPAField.setPreferredSize(new java.awt.Dimension(160, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        studentDetailPanel.add(studGPAField, gridBagConstraints);

        studNameLabel.setText("Full Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentDetailPanel.add(studNameLabel, gridBagConstraints);

        studAdminLabel.setText("Admin Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentDetailPanel.add(studAdminLabel, gridBagConstraints);

        studClassLabel.setText("Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentDetailPanel.add(studClassLabel, gridBagConstraints);

        studGPALabel.setText("GPA:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentDetailPanel.add(studGPALabel, gridBagConstraints);

        studentPanel.add(studentDetailPanel);

        studentModulePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        studentModulePanel.setName(""); // NOI18N
        studentModulePanel.setLayout(new java.awt.GridBagLayout());

        paneTitle1.setText("Module Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentModulePanel.add(paneTitle1, gridBagConstraints);

        modCodeField.setEditable(false);
        modCodeField.setMinimumSize(new java.awt.Dimension(200, 30));
        modCodeField.setPreferredSize(new java.awt.Dimension(160, 27));
        modCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modCodeFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        studentModulePanel.add(modCodeField, gridBagConstraints);

        modNameField.setEditable(false);
        modNameField.setMinimumSize(new java.awt.Dimension(200, 30));
        modNameField.setPreferredSize(new java.awt.Dimension(160, 27));
        modNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        studentModulePanel.add(modNameField, gridBagConstraints);

        modCreditField.setEditable(false);
        modCreditField.setPreferredSize(new java.awt.Dimension(160, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        studentModulePanel.add(modCreditField, gridBagConstraints);

        modGradeField.setEditable(false);
        modGradeField.setPreferredSize(new java.awt.Dimension(160, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        studentModulePanel.add(modGradeField, gridBagConstraints);

        modCodeLabel.setText("Module Code:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentModulePanel.add(modCodeLabel, gridBagConstraints);

        modNameLabel.setText("Module Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentModulePanel.add(modNameLabel, gridBagConstraints);

        modCreditLabel.setText("Module Credit Units:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentModulePanel.add(modCreditLabel, gridBagConstraints);

        modGradeLabel.setText("Module Grade:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        studentModulePanel.add(modGradeLabel, gridBagConstraints);

        paginationPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        paginationPanel1.setMaximumSize(new java.awt.Dimension(10000, 25));
        paginationPanel1.setMinimumSize(new java.awt.Dimension(100, 25));
        paginationPanel1.setPreferredSize(new java.awt.Dimension(100, 25));
        paginationPanel1.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        prevModulePageButton.setText("-1");
        prevModulePageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevModulePageButtonActionPerformed(evt);
            }
        });
        paginationPanel1.add(prevModulePageButton);
        paginationPanel1.add(modulePageIndicator);

        nextModulePageButton.setText("+1");
        nextModulePageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextModulePageButtonActionPerformed(evt);
            }
        });
        paginationPanel1.add(nextModulePageButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        studentModulePanel.add(paginationPanel1, gridBagConstraints);

        studentPanel.add(studentModulePanel);
        studentModulePanel.getAccessibleContext().setAccessibleName("");
        studentModulePanel.getAccessibleContext().setAccessibleDescription("");

        jPanel6.add(studentPanel);

        Body.add(jPanel6);

        jPanel1.add(Body, java.awt.BorderLayout.CENTER);

        Navbar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Navbar.setPreferredSize(new java.awt.Dimension(100, 100));
        Navbar.setLayout(new java.awt.GridBagLayout());

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 436;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        Navbar.add(SearchBar, gridBagConstraints);

        searchButton.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        Navbar.add(searchButton, gridBagConstraints);

        clearButton.setText("Clear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        Navbar.add(clearButton, gridBagConstraints);

        byClassRadioButton.setText("By Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        Navbar.add(byClassRadioButton, gridBagConstraints);

        byNameRadioButton.setText("By Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);
        Navbar.add(byNameRadioButton, gridBagConstraints);

        jPanel1.add(Navbar, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1042, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
        setPreferredSize(new Dimension(250, 100)); // Set the preferred size of the button
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        return this;
    }
}

    public class ButtonEditor extends DefaultCellEditor {
    private String label;
    private JButton button;
    private boolean isPushed;
    private HashMap<String, Object> student;
    private Consumer<HashMap<String, Object>> showDetailsConsumer;

    public ButtonEditor(JCheckBox checkBox, Consumer<HashMap<String, Object>> showDetailsConsumer) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.setPreferredSize(new Dimension(250, 100)); // Set the preferred size of the button
        this.showDetailsConsumer = showDetailsConsumer;
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
                if (student != null) {
                    showDetailsConsumer.accept(student);
                }
            }
        });
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;

        // Assuming the student data is stored in the table model
        int modelRow = table.convertRowIndexToModel(row);
        student = ((MyTableModel) table.getModel()).getStudentAt(modelRow);

        return button;
    }

    @Override
    public Object getCellEditorValue() {
        isPushed = false;
        return label;
    }

    @Override
    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }

    @Override
    protected void fireEditingStopped() {
        super.fireEditingStopped();
        }
    }

    public class MyTableModel extends DefaultTableModel {
    private List<HashMap<String, Object>> students;

    public MyTableModel(Object[][] data, Object[] columnNames, List<HashMap<String, Object>> students) {
        super(data, columnNames);
        this.students = students;
    }

    public HashMap<String, Object> getStudentAt(int row) {
        return students.get(row);
    }

    @Override
    public boolean isCellEditable(int row, int column) {
        return column == 0; // Only the button column is editable
    }
    }
    private void updatePageLabel() {
        pageLabel.setText(currentPage + " of " + totalPageCount);
    }
    
    private void updateModulePageLabel() {
        studentModulePanel.setBorder(BorderFactory.createTitledBorder("Module " + (currentModulePage + 1) + " of " + totalModulePageCount));
    }
    
    private void nextPageModule() {
        if (currentModulePage < totalModulePageCount - 1) {
            currentModulePage++;
            showCurrentModuleDetails();
            updateModulePageLabel();
        }
    }

    private void previousPageModule() {
        if (currentModulePage > 0) {
            currentModulePage--;
            showCurrentModuleDetails();
            updateModulePageLabel();
        }
    }
    
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Clear search results
        SearchBar.setText("");
    }
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        errorField.setText("");
        String query = SearchBar.getText().toLowerCase();
        List<HashMap<String, Object>> results = new ArrayList<>();
        
        if (results.size() == 0) {
            errorField.setText("No Results Found");
        }
        
        
        if (byNameRadioButton.isSelected()) {
            // Search in classMap for matching student names
            for (List<HashMap<String, Object>> classStudents : Student.getClassMap().values()) {
                for (HashMap<String, Object> studentData : classStudents) {
                    Boolean matchFound = false;
                    // Check each value in the student data map
                    for (Object value : studentData.values()) {
                        if (value != null && value.toString().toLowerCase().contains(query)) {
                            matchFound = true;
                            break;
                        }
                    }

                    if (matchFound) {
                        results.add(studentData);
                    }
                }
            }
            
            if (results.size() == 0) {
                errorField.setText("No Results Found");
            } else {
                errorField.setText("");
                updateClassInfo(SearchBar.getText());
                currentPage = 0;  // Reset to the first page
                students = results;  // Store the search results
                populateStudentButtons(results);
            }
            
        } else if (byClassRadioButton.isSelected()) {
            
            // Search in classMap for matching class names
            for (Map.Entry<String, List<HashMap<String, Object>>> entry : Student.getClassMap().entrySet()) {
                String className = entry.getKey();
                List<HashMap<String, Object>> classStudents = entry.getValue();

                if (className.toLowerCase() == (query)) {
                    for (HashMap<String, Object> studentData : classStudents) {
                        results.add(studentData);
                    }
                }
            } 
            
            if (results.size() == 0) {
                errorField.setText("No Results Found");
            } else {
                errorField.setText("");
                updateClassInfo(SearchBar.getText());
                currentPage = 0;  // Reset to the first page
                students = results;  // Store the search results
                populateStudentButtons(results);
            }
            
        } else {
                errorField.setText("Please Select By Name or By Class");
            }
        
        
    }

    
    private void populateStudentButtons(List<HashMap<String, Object>> students) {
        totalPageCount = (int) Math.ceil((double) students.size() / PAGE_SIZE);

        // Ensure currentPage is within valid bounds
        if (currentPage > totalPageCount) {
            currentPage = totalPageCount;
        }
        if (currentPage < 1) {
            currentPage = 1;
        }

        int startIndex = (currentPage - 1) * PAGE_SIZE;
        int endIndex = Math.min(startIndex + PAGE_SIZE, students.size());
        List<HashMap<String, Object>> pageStudents = students.subList(startIndex, endIndex);

        String[] columnNames = {"Student Name"};
        Object[][] data = new Object[PAGE_SIZE][1];

        for (int i = 0; i < PAGE_SIZE; i++) {
            if (i < pageStudents.size()) {
                HashMap<String, Object> student = pageStudents.get(i);
                data[i][0] = student.get("name"); // The button will display the student's name
            } else {
                data[i][0] = ""; // Fill remaining rows with empty strings
            }
        }

        MyTableModel model = new MyTableModel(data, columnNames, pageStudents);
        resultsPanel.setModel(model);
        resultsPanel.getColumn("Student Name").setCellRenderer(new ButtonRenderer());
        resultsPanel.getColumn("Student Name").setCellEditor(new ButtonEditor(new JCheckBox(), this::showStudentDetails));

        // Ensure pagination buttons are always visible
        prevPageButton.setVisible(true);
        nextPageButton.setVisible(true);

        // Update visibility of pagination buttons
        prevPageButton.setEnabled(currentPage > 1);
        nextPageButton.setEnabled(currentPage < totalPageCount);

        updatePageLabel();
    }
    

    private void nextPage() {
        int totalPages = (int) Math.ceil((double) students.size() / PAGE_SIZE);
        if (currentPage < totalPages) {
            currentPage++;
            populateStudentButtons(students);
        }
    }

    private void previousPage() {
        if (currentPage > 1) {
            currentPage--;
            populateStudentButtons(students);
        }
    }
    
    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed

    }//GEN-LAST:event_SearchBarActionPerformed

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed


    }//GEN-LAST:event_nextPageButtonActionPerformed

    private void studNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studNameFieldActionPerformed

    private void studAdminFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studAdminFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studAdminFieldActionPerformed

    private void modCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modCodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modCodeFieldActionPerformed

    private void modNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modNameFieldActionPerformed

    private void nextModulePageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextModulePageButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextModulePageButtonActionPerformed

    private void prevModulePageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevModulePageButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prevModulePageButtonActionPerformed

    private void errorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_errorFieldActionPerformed
                            
    
    
   // Method to update the GPA and student count
    public void updateClassInfo(String className) {
        List<HashMap<String, Object>> schoolClass = Student.getClassMap().get(className);
        if (schoolClass != null) {
            Double avgGPA = GPACalculator.calculateAverageGPAForClass(schoolClass);
            int studentCount = schoolClass.size();
            System.out.println(schoolClass);

            avgGPAIndicator.setText(avgGPA != null ? avgGPA.toString() : "N/A");
            studCountIndicator.setText(String.valueOf(studentCount));
        } else {
            avgGPAIndicator.setText("N/A");
            studCountIndicator.setText("N/");
        }
    }

    private void showStudentDetails(HashMap<String, Object> student) {
        // Extract student details
        String studentName = (String) student.get("name");
        String studentAdmin = (String) student.get("admin");
        String studentClass = (String) student.get("class");
        double studentGPA = GPACalculator.calculateGPA(student);

        // Display student details
        studNameField.setText(studentName);
        studAdminField.setText(studentAdmin);
        studClassField.setText(studentClass);
        studGPAField.setText(String.valueOf(studentGPA));

        // Get student modules
        Map<String, String> modulesMap = (Map<String, String>) student.get("modules");
        currentStudentModules.clear();
        for (Map.Entry<String, String> entry : modulesMap.entrySet()) {
            Modules module = GPACalculator.findModuleByName(entry.getKey());
            if (module != null) {
                module.setGrade(entry.getValue());
                currentStudentModules.add(module);
            }
        }

        // Set pagination variables
        currentModulePage = 0;
        totalModulePageCount = currentStudentModules.size();

        // Show initial module details
        showCurrentModuleDetails();
    }

    private void showCurrentModuleDetails() {
        if (currentModulePage >= 0 && currentModulePage < totalModulePageCount) {
            // Display module details
            Modules module = currentStudentModules.get(currentModulePage);

            modCodeField.setText(module.getModCode());
            modNameField.setText(module.getModName());
            modCreditField.setText(String.valueOf(module.getModCreditUnit()));
            modGradeField.setText(module.getGrade());
        }

        // Update navigation buttons visibility and state
        prevPageButton.setEnabled(currentModulePage > 0);
        nextPageButton.setEnabled(currentModulePage < totalModulePageCount - 1);
        updateModulePageLabel();
    }
 
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Body;
    private javax.swing.JPanel Navbar;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JPanel advancedFeaturePanel;
    private javax.swing.JLabel avgGPAIndicator;
    private javax.swing.JLabel avgGPALabel;
    private javax.swing.JRadioButton byClassRadioButton;
    private javax.swing.JRadioButton byNameRadioButton;
    private javax.swing.JPanel classInfoPane;
    private javax.swing.JPanel classPane;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField errorField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField modCodeField;
    private javax.swing.JLabel modCodeLabel;
    private javax.swing.JTextField modCreditField;
    private javax.swing.JLabel modCreditLabel;
    private javax.swing.JTextField modGradeField;
    private javax.swing.JLabel modGradeLabel;
    private javax.swing.JTextField modNameField;
    private javax.swing.JLabel modNameLabel;
    private javax.swing.JLabel modulePageIndicator;
    private javax.swing.JButton nextModulePageButton;
    private javax.swing.JButton nextPageButton;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JPanel paginationPanel;
    private javax.swing.JPanel paginationPanel1;
    private javax.swing.JLabel paneTitle;
    private javax.swing.JLabel paneTitle1;
    private javax.swing.JButton prevModulePageButton;
    private javax.swing.JButton prevPageButton;
    private javax.swing.JTable resultsPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField studAdminField;
    private javax.swing.JLabel studAdminLabel;
    private javax.swing.JTextField studClassField;
    private javax.swing.JLabel studClassLabel;
    private javax.swing.JLabel studCountIndicator;
    private javax.swing.JLabel studCountLabel;
    private javax.swing.JTextField studGPAField;
    private javax.swing.JLabel studGPALabel;
    private javax.swing.JTextField studNameField;
    private javax.swing.JLabel studNameLabel;
    private javax.swing.JPanel studentDetailPanel;
    private javax.swing.JPanel studentModulePanel;
    private javax.swing.JPanel studentPanel;
    // End of variables declaration//GEN-END:variables

}